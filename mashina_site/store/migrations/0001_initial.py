# Generated by Django 5.1.2 on 2024-10-18 11:23

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Marka',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('marka_name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('age', models.PositiveSmallIntegerField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(18), django.core.validators.MaxValueValidator(100)])),
                ('date_registered', models.DateTimeField(auto_now=True, null=True)),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region='KG')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Car',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year_of_release', models.DateField(verbose_name='Год выпуска')),
                ('mileage', models.PositiveSmallIntegerField(blank=True, default=0, null=True, verbose_name='Пробег')),
                ('the_body', models.CharField(blank=True, max_length=100, null=True, verbose_name='Кузов')),
                ('the_body_en', models.CharField(blank=True, max_length=100, null=True, verbose_name='Кузов')),
                ('the_body_ru', models.CharField(blank=True, max_length=100, null=True, verbose_name='Кузов')),
                ('the_body_ky', models.CharField(blank=True, max_length=100, null=True, verbose_name='Кузов')),
                ('colour', models.CharField(blank=True, max_length=100, null=True, verbose_name='Цвет')),
                ('colour_en', models.CharField(blank=True, max_length=100, null=True, verbose_name='Цвет')),
                ('colour_ru', models.CharField(blank=True, max_length=100, null=True, verbose_name='Цвет')),
                ('colour_ky', models.CharField(blank=True, max_length=100, null=True, verbose_name='Цвет')),
                ('engine', models.CharField(blank=True, max_length=100, null=True, verbose_name='Двигатель')),
                ('engine_en', models.CharField(blank=True, max_length=100, null=True, verbose_name='Двигатель')),
                ('engine_ru', models.CharField(blank=True, max_length=100, null=True, verbose_name='Двигатель')),
                ('engine_ky', models.CharField(blank=True, max_length=100, null=True, verbose_name='Двигатель')),
                ('box_ru', models.CharField(blank=True, choices=[('Механик', 'Механик'), ('Автомат', 'Автомат')], max_length=100, null=True, verbose_name='Коробка')),
                ('box_ru_en', models.CharField(blank=True, choices=[('Механик', 'Механик'), ('Автомат', 'Автомат')], max_length=100, null=True, verbose_name='Коробка')),
                ('box_ru_ru', models.CharField(blank=True, choices=[('Механик', 'Механик'), ('Автомат', 'Автомат')], max_length=100, null=True, verbose_name='Коробка')),
                ('box_ru_ky', models.CharField(blank=True, choices=[('Механик', 'Механик'), ('Автомат', 'Автомат')], max_length=100, null=True, verbose_name='Коробка')),
                ('box_en', models.CharField(blank=True, choices=[('manual', 'Manual'), ('automatic', 'Automatic')], max_length=100, null=True, verbose_name='Gearbox')),
                ('box_en_en', models.CharField(blank=True, choices=[('manual', 'Manual'), ('automatic', 'Automatic')], max_length=100, null=True, verbose_name='Gearbox')),
                ('box_en_ru', models.CharField(blank=True, choices=[('manual', 'Manual'), ('automatic', 'Automatic')], max_length=100, null=True, verbose_name='Gearbox')),
                ('box_en_ky', models.CharField(blank=True, choices=[('manual', 'Manual'), ('automatic', 'Automatic')], max_length=100, null=True, verbose_name='Gearbox')),
                ('box_kg', models.CharField(blank=True, choices=[('механикалык', 'Механикалык'), ('автоматтык', 'Автоматтык')], max_length=100, null=True, verbose_name='КПП')),
                ('box_kg_en', models.CharField(blank=True, choices=[('механикалык', 'Механикалык'), ('автоматтык', 'Автоматтык')], max_length=100, null=True, verbose_name='КПП')),
                ('box_kg_ru', models.CharField(blank=True, choices=[('механикалык', 'Механикалык'), ('автоматтык', 'Автоматтык')], max_length=100, null=True, verbose_name='КПП')),
                ('box_kg_ky', models.CharField(blank=True, choices=[('механикалык', 'Механикалык'), ('автоматтык', 'Автоматтык')], max_length=100, null=True, verbose_name='КПП')),
                ('drive_ru', models.CharField(blank=True, choices=[('полный', 'Полный'), ('задний', 'Задний'), ('Передний', 'Передний')], max_length=100, null=True, verbose_name='Привод')),
                ('drive_ru_en', models.CharField(blank=True, choices=[('полный', 'Полный'), ('задний', 'Задний'), ('Передний', 'Передний')], max_length=100, null=True, verbose_name='Привод')),
                ('drive_ru_ru', models.CharField(blank=True, choices=[('полный', 'Полный'), ('задний', 'Задний'), ('Передний', 'Передний')], max_length=100, null=True, verbose_name='Привод')),
                ('drive_ru_ky', models.CharField(blank=True, choices=[('полный', 'Полный'), ('задний', 'Задний'), ('Передний', 'Передний')], max_length=100, null=True, verbose_name='Привод')),
                ('drive_kg', models.CharField(blank=True, choices=[('толук', 'Толук'), ('арткы', 'Арткы'), ('алдыңкы', 'Алдыңкы')], max_length=100, null=True, verbose_name='Тартышы')),
                ('drive_kg_en', models.CharField(blank=True, choices=[('толук', 'Толук'), ('арткы', 'Арткы'), ('алдыңкы', 'Алдыңкы')], max_length=100, null=True, verbose_name='Тартышы')),
                ('drive_kg_ru', models.CharField(blank=True, choices=[('толук', 'Толук'), ('арткы', 'Арткы'), ('алдыңкы', 'Алдыңкы')], max_length=100, null=True, verbose_name='Тартышы')),
                ('drive_kg_ky', models.CharField(blank=True, choices=[('толук', 'Толук'), ('арткы', 'Арткы'), ('алдыңкы', 'Алдыңкы')], max_length=100, null=True, verbose_name='Тартышы')),
                ('drive_en', models.CharField(blank=True, choices=[('full', 'Full'), ('rear', 'Rear'), ('front', 'Front')], max_length=100, null=True, verbose_name='Drive')),
                ('drive_en_en', models.CharField(blank=True, choices=[('full', 'Full'), ('rear', 'Rear'), ('front', 'Front')], max_length=100, null=True, verbose_name='Drive')),
                ('drive_en_ru', models.CharField(blank=True, choices=[('full', 'Full'), ('rear', 'Rear'), ('front', 'Front')], max_length=100, null=True, verbose_name='Drive')),
                ('drive_en_ky', models.CharField(blank=True, choices=[('full', 'Full'), ('rear', 'Rear'), ('front', 'Front')], max_length=100, null=True, verbose_name='Drive')),
                ('rudder_ru', models.CharField(blank=True, choices=[('Левый', 'Левый'), ('Правый', 'Правый')], max_length=10, null=True, verbose_name='Руль')),
                ('rudder_ru_en', models.CharField(blank=True, choices=[('Левый', 'Левый'), ('Правый', 'Правый')], max_length=10, null=True, verbose_name='Руль')),
                ('rudder_ru_ru', models.CharField(blank=True, choices=[('Левый', 'Левый'), ('Правый', 'Правый')], max_length=10, null=True, verbose_name='Руль')),
                ('rudder_ru_ky', models.CharField(blank=True, choices=[('Левый', 'Левый'), ('Правый', 'Правый')], max_length=10, null=True, verbose_name='Руль')),
                ('rudder_kg', models.CharField(blank=True, choices=[('сол', 'Сол'), ('оң', 'Оң')], max_length=10, null=True, verbose_name='Руль')),
                ('rudder_kg_en', models.CharField(blank=True, choices=[('сол', 'Сол'), ('оң', 'Оң')], max_length=10, null=True, verbose_name='Руль')),
                ('rudder_kg_ru', models.CharField(blank=True, choices=[('сол', 'Сол'), ('оң', 'Оң')], max_length=10, null=True, verbose_name='Руль')),
                ('rudder_kg_ky', models.CharField(blank=True, choices=[('сол', 'Сол'), ('оң', 'Оң')], max_length=10, null=True, verbose_name='Руль')),
                ('rudder_en', models.CharField(blank=True, choices=[('left', 'Left'), ('right', 'Right')], max_length=10, null=True, verbose_name='Steering wheel')),
                ('rudder_en_en', models.CharField(blank=True, choices=[('left', 'Left'), ('right', 'Right')], max_length=10, null=True, verbose_name='Steering wheel')),
                ('rudder_en_ru', models.CharField(blank=True, choices=[('left', 'Left'), ('right', 'Right')], max_length=10, null=True, verbose_name='Steering wheel')),
                ('rudder_en_ky', models.CharField(blank=True, choices=[('left', 'Left'), ('right', 'Right')], max_length=10, null=True, verbose_name='Steering wheel')),
                ('condition', models.CharField(blank=True, max_length=100, null=True, verbose_name='Состояние')),
                ('condition_en', models.CharField(blank=True, max_length=100, null=True, verbose_name='Состояние')),
                ('condition_ru', models.CharField(blank=True, max_length=100, null=True, verbose_name='Состояние')),
                ('condition_ky', models.CharField(blank=True, max_length=100, null=True, verbose_name='Состояние')),
                ('customs', models.CharField(blank=True, max_length=35, null=True, verbose_name='Таможня')),
                ('customs_en', models.CharField(blank=True, max_length=35, null=True, verbose_name='Таможня')),
                ('customs_ru', models.CharField(blank=True, max_length=35, null=True, verbose_name='Таможня')),
                ('customs_ky', models.CharField(blank=True, max_length=35, null=True, verbose_name='Таможня')),
                ('exchange', models.CharField(blank=True, max_length=100, null=True, verbose_name='Обмен')),
                ('exchange_en', models.CharField(blank=True, max_length=100, null=True, verbose_name='Обмен')),
                ('exchange_ru', models.CharField(blank=True, max_length=100, null=True, verbose_name='Обмен')),
                ('exchange_ky', models.CharField(blank=True, max_length=100, null=True, verbose_name='Обмен')),
                ('availability', models.BooleanField(verbose_name='Наличие')),
                ('availability_en', models.BooleanField(verbose_name='Наличие')),
                ('availability_ru', models.BooleanField(verbose_name='Наличие')),
                ('availability_ky', models.BooleanField(verbose_name='Наличие')),
                ('region_city_of_ale', models.CharField(max_length=35, verbose_name='Регион, город продажи')),
                ('region_city_of_ale_en', models.CharField(max_length=35, null=True, verbose_name='Регион, город продажи')),
                ('region_city_of_ale_ru', models.CharField(max_length=35, null=True, verbose_name='Регион, город продажи')),
                ('region_city_of_ale_ky', models.CharField(max_length=35, null=True, verbose_name='Регион, город продажи')),
                ('accounting', models.CharField(max_length=35, verbose_name='Учёт')),
                ('accounting_en', models.CharField(max_length=35, null=True, verbose_name='Учёт')),
                ('accounting_ru', models.CharField(max_length=35, null=True, verbose_name='Учёт')),
                ('accounting_ky', models.CharField(max_length=35, null=True, verbose_name='Учёт')),
                ('other', models.TextField(blank=True, null=True, verbose_name='Прочее')),
                ('other_en', models.TextField(blank=True, null=True, verbose_name='Прочее')),
                ('other_ru', models.TextField(blank=True, null=True, verbose_name='Прочее')),
                ('other_ky', models.TextField(blank=True, null=True, verbose_name='Прочее')),
                ('vin', models.CharField(blank=True, max_length=35, null=True)),
                ('vin_en', models.CharField(blank=True, max_length=35, null=True)),
                ('vin_ru', models.CharField(blank=True, max_length=35, null=True)),
                ('vin_ky', models.CharField(blank=True, max_length=35, null=True)),
                ('price_dollars', models.PositiveSmallIntegerField()),
                ('text', models.TextField(blank=True, null=True)),
                ('text_en', models.TextField(blank=True, null=True)),
                ('text_ru', models.TextField(blank=True, null=True)),
                ('text_ky', models.TextField(blank=True, null=True)),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('marka', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.marka')),
            ],
        ),
        migrations.CreateModel(
            name='CarPhotos',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('images', models.ImageField(upload_to='car_images/')),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='store.car')),
            ],
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('car', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.car')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Model',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model_name', models.CharField(max_length=100)),
                ('marka', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='model', to='store.marka')),
            ],
        ),
        migrations.AddField(
            model_name='car',
            name='model',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.model'),
        ),
    ]
